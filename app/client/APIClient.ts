/* tslint:disable */

/**
 * This file was automatically generated by "Swaxios".
 * It should not be modified by hand.
 */

import axios, { AxiosInstance, AxiosRequestConfig } from "axios";
import { ProgramService, ProgramsService } from "./rest/api";
import {
  AdvanceService,
  BranchesService,
  CancelService,
  EnvironmentsService,
  ExecutionService,
  ExecutionsService,
  LogsService,
  MetricsService,
  PipelinesService,
  RepositoriesService
} from "./rest/api/program";

/**
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below).
 */
export class APIClient {
  private readonly httpClient: AxiosInstance;

  constructor(baseURL: string);
  constructor(config: AxiosRequestConfig);
  constructor(configOrBaseURL: AxiosRequestConfig | string) {
    if (typeof configOrBaseURL === "string") {
      configOrBaseURL = { baseURL: configOrBaseURL };
    }
    this.httpClient = axios.create(configOrBaseURL);
  }

  get rest() {
    return {
      api: {
        programService: new ProgramService(this.httpClient),
        programsService: new ProgramsService(this.httpClient),
        program: {
          advanceService: new AdvanceService(this.httpClient),
          branchesService: new BranchesService(this.httpClient),
          cancelService: new CancelService(this.httpClient),
          environmentsService: new EnvironmentsService(this.httpClient),
          executionService: new ExecutionService(this.httpClient),
          executionsService: new ExecutionsService(this.httpClient),
          logsService: new LogsService(this.httpClient),
          metricsService: new MetricsService(this.httpClient),
          pipelinesService: new PipelinesService(this.httpClient),
          repositoriesService: new RepositoriesService(this.httpClient)
        }
      }
    };
  }

  get defaults() {
    return this.httpClient.defaults;
  }

  get interceptors() {
    return this.httpClient.interceptors;
  }
}
