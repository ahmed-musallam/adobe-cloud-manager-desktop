// tslint:disable
/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BranchList
 */
export interface BranchList {
    /**
     * 
     * @type {number}
     * @memberof BranchList
     */
    totalNumberOfItems?: number;
    /**
     * 
     * @type {BranchListEmbedded}
     * @memberof BranchList
     */
    embedded?: BranchListEmbedded;
    /**
     * 
     * @type {ProgramListLinks}
     * @memberof BranchList
     */
    links?: ProgramListLinks;
}
/**
 * 
 * @export
 * @interface BranchListEmbedded
 */
export interface BranchListEmbedded {
    /**
     * 
     * @type {Array<RepositoryBranch>}
     * @memberof BranchListEmbedded
     */
    branches?: Array<RepositoryBranch>;
}
/**
 * Describes an __Embedded Program__
 * @export
 * @interface EmbeddedProgram
 */
export interface EmbeddedProgram {
    /**
     * Identifier of the program. Unique within the space.
     * @type {string}
     * @memberof EmbeddedProgram
     */
    id?: string;
    /**
     * Name of the program
     * @type {string}
     * @memberof EmbeddedProgram
     */
    name: string;
    /**
     * Whether this Program has been enabled for Cloud Manager usage
     * @type {boolean}
     * @memberof EmbeddedProgram
     */
    enabled?: boolean;
    /**
     * Tenant Id
     * @type {string}
     * @memberof EmbeddedProgram
     */
    tenantId?: string;
    /**
     * 
     * @type {EmbeddedProgramLinks}
     * @memberof EmbeddedProgram
     */
    links?: EmbeddedProgramLinks;
}
/**
 * 
 * @export
 * @interface EmbeddedProgramLinks
 */
export interface EmbeddedProgramLinks {
    /**
     * 
     * @type {HalLink}
     * @memberof EmbeddedProgramLinks
     */
    self?: HalLink;
}
/**
 * An Environment that 
 * @export
 * @interface Environment
 */
export interface Environment {
    /**
     * id
     * @type {string}
     * @memberof Environment
     */
    id?: string;
    /**
     * Identifier of the program. Unique within the space.
     * @type {string}
     * @memberof Environment
     */
    programId?: string;
    /**
     * Name of the environment
     * @type {string}
     * @memberof Environment
     */
    name?: string;
    /**
     * Description of the environment
     * @type {string}
     * @memberof Environment
     */
    description?: string;
    /**
     * Type of the environment
     * @type {string}
     * @memberof Environment
     */
    type?: EnvironmentTypeEnum;
    /**
     * 
     * @type {EnvironmentLinks}
     * @memberof Environment
     */
    links?: EnvironmentLinks;
}

/**
    * @export
    * @enum {string}
    */
export enum EnvironmentTypeEnum {
    Dev = 'dev',
    Stage = 'stage',
    Prod = 'prod'
}

/**
 * 
 * @export
 * @interface EnvironmentLinks
 */
export interface EnvironmentLinks {
    /**
     * 
     * @type {HalLink}
     * @memberof EnvironmentLinks
     */
    httpNsAdobeComAdobecloudRelProgram?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof EnvironmentLinks
     */
    httpNsAdobeComAdobecloudRelPipeline?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof EnvironmentLinks
     */
    httpNsAdobeComAdobecloudRelAuthor?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof EnvironmentLinks
     */
    httpNsAdobeComAdobecloudRelPublish?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof EnvironmentLinks
     */
    self?: HalLink;
}
/**
 * 
 * @export
 * @interface EnvironmentList
 */
export interface EnvironmentList {
    /**
     * 
     * @type {number}
     * @memberof EnvironmentList
     */
    totalNumberOfItems?: number;
    /**
     * 
     * @type {EnvironmentListEmbedded}
     * @memberof EnvironmentList
     */
    embedded?: EnvironmentListEmbedded;
    /**
     * 
     * @type {ProgramListLinks}
     * @memberof EnvironmentList
     */
    links?: ProgramListLinks;
}
/**
 * 
 * @export
 * @interface EnvironmentListEmbedded
 */
export interface EnvironmentListEmbedded {
    /**
     * 
     * @type {Array<Environment>}
     * @memberof EnvironmentListEmbedded
     */
    environments?: Array<Environment>;
}
/**
 * 
 * @export
 * @interface HalLink
 */
export interface HalLink {
    /**
     * 
     * @type {string}
     * @memberof HalLink
     */
    href?: string;
    /**
     * 
     * @type {boolean}
     * @memberof HalLink
     */
    templated?: boolean;
    /**
     * 
     * @type {string}
     * @memberof HalLink
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof HalLink
     */
    deprecation?: string;
    /**
     * 
     * @type {string}
     * @memberof HalLink
     */
    profile?: string;
    /**
     * 
     * @type {string}
     * @memberof HalLink
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof HalLink
     */
    hreflang?: string;
    /**
     * 
     * @type {string}
     * @memberof HalLink
     */
    name?: string;
}
/**
 * Describes a __Metric__
 * @export
 * @interface Metric
 */
export interface Metric {
    /**
     * KPI result identifier
     * @type {string}
     * @memberof Metric
     */
    id?: string;
    /**
     * Severity of the metric
     * @type {string}
     * @memberof Metric
     */
    severity?: MetricSeverityEnum;
    /**
     * Whether metric is considered passed
     * @type {boolean}
     * @memberof Metric
     */
    passed?: boolean;
    /**
     * Whether user override the failed metric
     * @type {boolean}
     * @memberof Metric
     */
    override?: boolean;
    /**
     * Expected value for the metric
     * @type {string}
     * @memberof Metric
     */
    actualValue?: string;
    /**
     * Expected value for the metric
     * @type {string}
     * @memberof Metric
     */
    expectedValue?: string;
    /**
     * Comparator used for the metric
     * @type {string}
     * @memberof Metric
     */
    comparator?: MetricComparatorEnum;
    /**
     * KPI identifier
     * @type {string}
     * @memberof Metric
     */
    kpi?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum MetricSeverityEnum {
    Critical = 'critical',
    Important = 'important',
    Informational = 'informational'
}
/**
    * @export
    * @enum {string}
    */
export enum MetricComparatorEnum {
    GT = 'GT',
    GTE = 'GTE',
    LT = 'LT',
    LTE = 'LTE',
    EQ = 'EQ',
    NEQ = 'NEQ'
}

/**
 * Describes a __CI/CD Pipeline__
 * @export
 * @interface Pipeline
 */
export interface Pipeline {
    /**
     * Identifier of the pipeline. Unique within the program.
     * @type {string}
     * @memberof Pipeline
     */
    id?: string;
    /**
     * Identifier of the program. Unique within the space.
     * @type {string}
     * @memberof Pipeline
     */
    programId?: string;
    /**
     * Name of the pipeline
     * @type {string}
     * @memberof Pipeline
     */
    name: string;
    /**
     * How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}
     * @type {string}
     * @memberof Pipeline
     */
    trigger?: PipelineTriggerEnum;
    /**
     * Pipeline status
     * @type {string}
     * @memberof Pipeline
     */
    status?: PipelineStatusEnum;
    /**
     * Create date
     * @type {Date}
     * @memberof Pipeline
     */
    createdAt?: Date;
    /**
     * Update date
     * @type {Date}
     * @memberof Pipeline
     */
    updatedAt?: Date;
    /**
     * Last pipeline execution start
     * @type {Date}
     * @memberof Pipeline
     */
    lastStartedAt?: Date;
    /**
     * Last pipeline execution end
     * @type {Date}
     * @memberof Pipeline
     */
    lastFinishedAt?: Date;
    /**
     * Pipeline phases in execution order
     * @type {Array<PipelinePhase>}
     * @memberof Pipeline
     */
    phases: Array<PipelinePhase>;
    /**
     * 
     * @type {PipelineLinks}
     * @memberof Pipeline
     */
    links?: PipelineLinks;
}

/**
    * @export
    * @enum {string}
    */
export enum PipelineTriggerEnum {
    ONCOMMIT = 'ON_COMMIT',
    MANUAL = 'MANUAL',
    SCHEDULE = 'SCHEDULE'
}
/**
    * @export
    * @enum {string}
    */
export enum PipelineStatusEnum {
    IDLE = 'IDLE',
    BUSY = 'BUSY',
    WAITING = 'WAITING'
}

/**
 * Wraps a pipeline execution
 * @export
 * @interface PipelineExecution
 */
export interface PipelineExecution {
    /**
     * Pipeline execution identifier
     * @type {string}
     * @memberof PipelineExecution
     */
    id?: string;
    /**
     * Identifier of the program. Unique within the space.
     * @type {string}
     * @memberof PipelineExecution
     */
    programId?: string;
    /**
     * Identifier of the pipeline. Unique within the space.
     * @type {string}
     * @memberof PipelineExecution
     */
    pipelineId?: string;
    /**
     * Version of the artifacts generated during this execution
     * @type {string}
     * @memberof PipelineExecution
     */
    artifactsVersion?: string;
    /**
     * AdobeID who started the pipeline. Empty for auto triggered builds
     * @type {string}
     * @memberof PipelineExecution
     */
    user?: string;
    /**
     * Status of the execution
     * @type {string}
     * @memberof PipelineExecution
     */
    status?: PipelineExecutionStatusEnum;
    /**
     * How the execution was triggered.
     * @type {string}
     * @memberof PipelineExecution
     */
    trigger?: PipelineExecutionTriggerEnum;
    /**
     * Start time
     * @type {Date}
     * @memberof PipelineExecution
     */
    createdAt?: Date;
    /**
     * Date of last status change
     * @type {Date}
     * @memberof PipelineExecution
     */
    updatedAt?: Date;
    /**
     * Date the execution reached a final state
     * @type {Date}
     * @memberof PipelineExecution
     */
    finishedAt?: Date;
    /**
     * 
     * @type {PipelineExecutionEmbedded}
     * @memberof PipelineExecution
     */
    embedded?: PipelineExecutionEmbedded;
    /**
     * 
     * @type {PipelineExecutionLinks}
     * @memberof PipelineExecution
     */
    links?: PipelineExecutionLinks;
}

/**
    * @export
    * @enum {string}
    */
export enum PipelineExecutionStatusEnum {
    NOTSTARTED = 'NOT_STARTED',
    RUNNING = 'RUNNING',
    CANCELLING = 'CANCELLING',
    CANCELLED = 'CANCELLED',
    FINISHED = 'FINISHED',
    ERROR = 'ERROR',
    FAILED = 'FAILED'
}
/**
    * @export
    * @enum {string}
    */
export enum PipelineExecutionTriggerEnum {
    ONCOMMIT = 'ON_COMMIT',
    MANUAL = 'MANUAL',
    SCHEDULE = 'SCHEDULE'
}

/**
 * 
 * @export
 * @interface PipelineExecutionEmbedded
 */
export interface PipelineExecutionEmbedded {
    /**
     * 
     * @type {Array<PipelineExecutionStepState>}
     * @memberof PipelineExecutionEmbedded
     */
    stepStates?: Array<PipelineExecutionStepState>;
}
/**
 * 
 * @export
 * @interface PipelineExecutionLinks
 */
export interface PipelineExecutionLinks {
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionLinks
     */
    httpNsAdobeComAdobecloudRelProgram?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionLinks
     */
    httpNsAdobeComAdobecloudRelPipeline?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionLinks
     */
    self?: HalLink;
}
/**
 * List of pipeline executions
 * @export
 * @interface PipelineExecutionListRepresentation
 */
export interface PipelineExecutionListRepresentation {
    /**
     * 
     * @type {number}
     * @memberof PipelineExecutionListRepresentation
     */
    totalNumberOfItems?: number;
    /**
     * 
     * @type {RequestedPageDetails}
     * @memberof PipelineExecutionListRepresentation
     */
    page?: RequestedPageDetails;
    /**
     * 
     * @type {PipelineExecutionListRepresentationEmbedded}
     * @memberof PipelineExecutionListRepresentation
     */
    embedded?: PipelineExecutionListRepresentationEmbedded;
    /**
     * 
     * @type {PipelineExecutionListRepresentationLinks}
     * @memberof PipelineExecutionListRepresentation
     */
    links?: PipelineExecutionListRepresentationLinks;
}
/**
 * 
 * @export
 * @interface PipelineExecutionListRepresentationEmbedded
 */
export interface PipelineExecutionListRepresentationEmbedded {
    /**
     * 
     * @type {Array<PipelineExecution>}
     * @memberof PipelineExecutionListRepresentationEmbedded
     */
    executions?: Array<PipelineExecution>;
}
/**
 * 
 * @export
 * @interface PipelineExecutionListRepresentationLinks
 */
export interface PipelineExecutionListRepresentationLinks {
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionListRepresentationLinks
     */
    next?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionListRepresentationLinks
     */
    page?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionListRepresentationLinks
     */
    prev?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionListRepresentationLinks
     */
    self?: HalLink;
}
/**
 * Describes the status of a particular pipeline execution step for display purposes
 * @export
 * @interface PipelineExecutionStepState
 */
export interface PipelineExecutionStepState {
    /**
     * 
     * @type {string}
     * @memberof PipelineExecutionStepState
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof PipelineExecutionStepState
     */
    stepId?: string;
    /**
     * 
     * @type {string}
     * @memberof PipelineExecutionStepState
     */
    phaseId?: string;
    /**
     * Name of the action
     * @type {string}
     * @memberof PipelineExecutionStepState
     */
    action?: string;
    /**
     * Target repository
     * @type {string}
     * @memberof PipelineExecutionStepState
     */
    repository?: string;
    /**
     * Target branch
     * @type {string}
     * @memberof PipelineExecutionStepState
     */
    branch?: string;
    /**
     * Target environment
     * @type {string}
     * @memberof PipelineExecutionStepState
     */
    environment?: string;
    /**
     * Target environment type
     * @type {string}
     * @memberof PipelineExecutionStepState
     */
    environmentType?: string;
    /**
     * Start time
     * @type {Date}
     * @memberof PipelineExecutionStepState
     */
    startedAt?: Date;
    /**
     * Date the execution reached a final state
     * @type {Date}
     * @memberof PipelineExecutionStepState
     */
    finishedAt?: Date;
    /**
     * Information about step result
     * @type {{ [key: string]: object; }}
     * @memberof PipelineExecutionStepState
     */
    details?: { [key: string]: object; };
    /**
     * Action status
     * @type {string}
     * @memberof PipelineExecutionStepState
     */
    status?: PipelineExecutionStepStateStatusEnum;
    /**
     * 
     * @type {PipelineExecutionStepStateLinks}
     * @memberof PipelineExecutionStepState
     */
    links?: PipelineExecutionStepStateLinks;
}

/**
    * @export
    * @enum {string}
    */
export enum PipelineExecutionStepStateStatusEnum {
    NOTSTARTED = 'NOT_STARTED',
    RUNNING = 'RUNNING',
    FINISHED = 'FINISHED',
    ERROR = 'ERROR',
    ROLLINGBACK = 'ROLLING_BACK',
    ROLLEDBACK = 'ROLLED_BACK',
    WAITING = 'WAITING',
    CANCELLED = 'CANCELLED',
    FAILED = 'FAILED'
}

/**
 * 
 * @export
 * @interface PipelineExecutionStepStateLinks
 */
export interface PipelineExecutionStepStateLinks {
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionStepStateLinks
     */
    httpNsAdobeComAdobecloudRelExecution?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionStepStateLinks
     */
    httpNsAdobeComAdobecloudRelPipeline?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionStepStateLinks
     */
    httpNsAdobeComAdobecloudRelPipelineLogs?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionStepStateLinks
     */
    httpNsAdobeComAdobecloudRelPipelineMetrics?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionStepStateLinks
     */
    httpNsAdobeComAdobecloudRelPipelineAdvance?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionStepStateLinks
     */
    httpNsAdobeComAdobecloudRelPipelineCancel?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionStepStateLinks
     */
    httpNsAdobeComAdobecloudRelProgram?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionStepStateLinks
     */
    self?: HalLink;
}
/**
 * 
 * @export
 * @interface PipelineLinks
 */
export interface PipelineLinks {
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineLinks
     */
    httpNsAdobeComAdobecloudRelProgram?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineLinks
     */
    httpNsAdobeComAdobecloudRelExecution?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineLinks
     */
    httpNsAdobeComAdobecloudRelExecutions?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineLinks
     */
    self?: HalLink;
}
/**
 * 
 * @export
 * @interface PipelineList
 */
export interface PipelineList {
    /**
     * 
     * @type {number}
     * @memberof PipelineList
     */
    totalNumberOfItems?: number;
    /**
     * 
     * @type {PipelineListEmbedded}
     * @memberof PipelineList
     */
    embedded?: PipelineListEmbedded;
    /**
     * 
     * @type {ProgramListLinks}
     * @memberof PipelineList
     */
    links?: ProgramListLinks;
}
/**
 * 
 * @export
 * @interface PipelineListEmbedded
 */
export interface PipelineListEmbedded {
    /**
     * 
     * @type {Array<Pipeline>}
     * @memberof PipelineListEmbedded
     */
    pipelines?: Array<Pipeline>;
}
/**
 * Describes a phase of a pipeline
 * @export
 * @interface PipelinePhase
 */
export interface PipelinePhase {
    /**
     * Name of the phase
     * @type {string}
     * @memberof PipelinePhase
     */
    name?: string;
    /**
     * Type of the phase
     * @type {string}
     * @memberof PipelinePhase
     */
    type: PipelinePhaseTypeEnum;
    /**
     * Identifier of the source repository. The code from this repository will be build at the start of this phase.  Mandatory if type=BUILD
     * @type {string}
     * @memberof PipelinePhase
     */
    repositoryId?: string;
    /**
     * Name of the tracked branch or a fully qualified git tag (e.g. refs/tags/v1).   Assumed to be `master` if missing.
     * @type {string}
     * @memberof PipelinePhase
     */
    branch?: string;
    /**
     * Identifier of the target environment. Mandatory if type=DEPLOY
     * @type {string}
     * @memberof PipelinePhase
     */
    environmentId?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum PipelinePhaseTypeEnum {
    VALIDATE = 'VALIDATE',
    BUILD = 'BUILD',
    DEPLOY = 'DEPLOY'
}

/**
 * 
 * @export
 * @interface PipelineStepMetrics
 */
export interface PipelineStepMetrics {
    /**
     * metrics
     * @type {Array<Metric>}
     * @memberof PipelineStepMetrics
     */
    metrics?: Array<Metric>;
}
/**
 * Describes a __Program__
 * @export
 * @interface Program
 */
export interface Program {
    /**
     * Identifier of the program. Unique within the space.
     * @type {string}
     * @memberof Program
     */
    id?: string;
    /**
     * Name of the program
     * @type {string}
     * @memberof Program
     */
    name: string;
    /**
     * Whether this Program has been enabled for Cloud Manager usage
     * @type {boolean}
     * @memberof Program
     */
    enabled?: boolean;
    /**
     * Tenant Id
     * @type {string}
     * @memberof Program
     */
    tenantId?: string;
    /**
     * Organisation Id
     * @type {string}
     * @memberof Program
     */
    imsOrgId?: string;
    /**
     * 
     * @type {ProgramLinks}
     * @memberof Program
     */
    links?: ProgramLinks;
}
/**
 * 
 * @export
 * @interface ProgramLinks
 */
export interface ProgramLinks {
    /**
     * 
     * @type {HalLink}
     * @memberof ProgramLinks
     */
    httpNsAdobeComAdobecloudRelPipelines?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof ProgramLinks
     */
    httpNsAdobeComAdobecloudRelEnvironments?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof ProgramLinks
     */
    httpNsAdobeComAdobecloudRelRepositories?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof ProgramLinks
     */
    self?: HalLink;
}
/**
 * 
 * @export
 * @interface ProgramList
 */
export interface ProgramList {
    /**
     * 
     * @type {number}
     * @memberof ProgramList
     */
    totalNumberOfItems?: number;
    /**
     * 
     * @type {ProgramListEmbedded}
     * @memberof ProgramList
     */
    embedded?: ProgramListEmbedded;
    /**
     * 
     * @type {ProgramListLinks}
     * @memberof ProgramList
     */
    links?: ProgramListLinks;
}
/**
 * 
 * @export
 * @interface ProgramListEmbedded
 */
export interface ProgramListEmbedded {
    /**
     * 
     * @type {Array<EmbeddedProgram>}
     * @memberof ProgramListEmbedded
     */
    programs?: Array<EmbeddedProgram>;
}
/**
 * 
 * @export
 * @interface ProgramListLinks
 */
export interface ProgramListLinks {
    /**
     * 
     * @type {HalLink}
     * @memberof ProgramListLinks
     */
    next?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof ProgramListLinks
     */
    prev?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof ProgramListLinks
     */
    self?: HalLink;
}
/**
 * A sourcecode repository
 * @export
 * @interface Repository
 */
export interface Repository {
    /**
     * Repository name
     * @type {string}
     * @memberof Repository
     */
    repo?: string;
    /**
     * description
     * @type {string}
     * @memberof Repository
     */
    description?: string;
    /**
     * 
     * @type {RepositoryLinks}
     * @memberof Repository
     */
    links?: RepositoryLinks;
}
/**
 * Represents a Git Branch
 * @export
 * @interface RepositoryBranch
 */
export interface RepositoryBranch {
    /**
     * Identifier of the program. Unique within the space
     * @type {string}
     * @memberof RepositoryBranch
     */
    programId?: string;
    /**
     * Identifier of the repository
     * @type {number}
     * @memberof RepositoryBranch
     */
    repositoryId?: number;
    /**
     * Name of the branch
     * @type {string}
     * @memberof RepositoryBranch
     */
    name?: string;
    /**
     * 
     * @type {RepositoryBranchLinks}
     * @memberof RepositoryBranch
     */
    links?: RepositoryBranchLinks;
}
/**
 * 
 * @export
 * @interface RepositoryBranchLinks
 */
export interface RepositoryBranchLinks {
    /**
     * 
     * @type {HalLink}
     * @memberof RepositoryBranchLinks
     */
    httpNsAdobeComAdobecloudRelProgram?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof RepositoryBranchLinks
     */
    httpNsAdobeComAdobecloudRelRepository?: HalLink;
}
/**
 * 
 * @export
 * @interface RepositoryLinks
 */
export interface RepositoryLinks {
    /**
     * 
     * @type {HalLink}
     * @memberof RepositoryLinks
     */
    httpNsAdobeComAdobecloudRelProgram?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof RepositoryLinks
     */
    httpNsAdobeComAdobecloudRelBranches?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof RepositoryLinks
     */
    self?: HalLink;
}
/**
 * 
 * @export
 * @interface RepositoryList
 */
export interface RepositoryList {
    /**
     * 
     * @type {number}
     * @memberof RepositoryList
     */
    totalNumberOfItems?: number;
    /**
     * 
     * @type {RepositoryListEmbedded}
     * @memberof RepositoryList
     */
    embedded?: RepositoryListEmbedded;
    /**
     * 
     * @type {ProgramListLinks}
     * @memberof RepositoryList
     */
    links?: ProgramListLinks;
}
/**
 * 
 * @export
 * @interface RepositoryListEmbedded
 */
export interface RepositoryListEmbedded {
    /**
     * 
     * @type {Array<Repository>}
     * @memberof RepositoryListEmbedded
     */
    repositories?: Array<Repository>;
}
/**
 * Filtering and sorting page details
 * @export
 * @interface RequestedPageDetails
 */
export interface RequestedPageDetails {
    /**
     * 
     * @type {number}
     * @memberof RequestedPageDetails
     */
    limit?: number;
    /**
     * 
     * @type {string}
     * @memberof RequestedPageDetails
     */
    orderBy?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RequestedPageDetails
     */
    property?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof RequestedPageDetails
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof RequestedPageDetails
     */
    next?: number;
    /**
     * 
     * @type {number}
     * @memberof RequestedPageDetails
     */
    prev?: number;
}

/**
 * BranchesApi - axios parameter creator
 * @export
 */
export const BranchesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the list of branches from a repository
         * @summary List Branches
         * @param {string} programId Identifier of the program.
         * @param {string} repositoryId Identifier of the repository
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBranches(programId: string, repositoryId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options: any = {}): RequestArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling getBranches.');
            }
            // verify required parameter 'repositoryId' is not null or undefined
            if (repositoryId === null || repositoryId === undefined) {
                throw new RequiredError('repositoryId','Required parameter repositoryId was null or undefined when calling getBranches.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getBranches.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getBranches.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getBranches.');
            }
            const localVarPath = `/api/program/{programId}/repository/{repositoryId}/branches`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"repositoryId"}}`, encodeURIComponent(String(repositoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = String(xGwImsOrgId);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BranchesApi - functional programming interface
 * @export
 */
export const BranchesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns the list of branches from a repository
         * @summary List Branches
         * @param {string} programId Identifier of the program.
         * @param {string} repositoryId Identifier of the repository
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBranches(programId: string, repositoryId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BranchList> {
            const localVarAxiosArgs = BranchesApiAxiosParamCreator(configuration).getBranches(programId, repositoryId, xGwImsOrgId, authorization, xApiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BranchesApi - factory interface
 * @export
 */
export const BranchesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns the list of branches from a repository
         * @summary List Branches
         * @param {string} programId Identifier of the program.
         * @param {string} repositoryId Identifier of the repository
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBranches(programId: string, repositoryId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any): AxiosPromise<BranchList> {
            return BranchesApiFp(configuration).getBranches(programId, repositoryId, xGwImsOrgId, authorization, xApiKey, options)(axios, basePath);
        },
    };
};

/**
 * BranchesApi - object-oriented interface
 * @export
 * @class BranchesApi
 * @extends {BaseAPI}
 */
export class BranchesApi extends BaseAPI {
    /**
     * Returns the list of branches from a repository
     * @summary List Branches
     * @param {string} programId Identifier of the program.
     * @param {string} repositoryId Identifier of the repository
     * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    public getBranches(programId: string, repositoryId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any) {
        return BranchesApiFp(this.configuration).getBranches(programId, repositoryId, xGwImsOrgId, authorization, xApiKey, options)(this.axios, this.basePath);
    }

}


/**
 * EnvironmentsApi - axios parameter creator
 * @export
 */
export const EnvironmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an environment by its id
         * @summary Get Environment
         * @param {string} programId Identifier of the program
         * @param {string} environmentId Identifier of the environment
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironment(programId: string, environmentId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options: any = {}): RequestArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling getEnvironment.');
            }
            // verify required parameter 'environmentId' is not null or undefined
            if (environmentId === null || environmentId === undefined) {
                throw new RequiredError('environmentId','Required parameter environmentId was null or undefined when calling getEnvironment.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getEnvironment.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getEnvironment.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getEnvironment.');
            }
            const localVarPath = `/api/program/{programId}/environment/{environmentId}`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"environmentId"}}`, encodeURIComponent(String(environmentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = String(xGwImsOrgId);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all environments in an program
         * @summary List Environments
         * @param {string} programId Identifier of the program
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {'dev' | 'stage' | 'prod'} [type] Type of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironments(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, type?: 'dev' | 'stage' | 'prod', options: any = {}): RequestArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling getEnvironments.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getEnvironments.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getEnvironments.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getEnvironments.');
            }
            const localVarPath = `/api/program/{programId}/environments`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = String(xGwImsOrgId);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnvironmentsApi - functional programming interface
 * @export
 */
export const EnvironmentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns an environment by its id
         * @summary Get Environment
         * @param {string} programId Identifier of the program
         * @param {string} environmentId Identifier of the environment
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironment(programId: string, environmentId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Environment> {
            const localVarAxiosArgs = EnvironmentsApiAxiosParamCreator(configuration).getEnvironment(programId, environmentId, xGwImsOrgId, authorization, xApiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Lists all environments in an program
         * @summary List Environments
         * @param {string} programId Identifier of the program
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {'dev' | 'stage' | 'prod'} [type] Type of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironments(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, type?: 'dev' | 'stage' | 'prod', options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentList> {
            const localVarAxiosArgs = EnvironmentsApiAxiosParamCreator(configuration).getEnvironments(programId, xGwImsOrgId, authorization, xApiKey, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EnvironmentsApi - factory interface
 * @export
 */
export const EnvironmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns an environment by its id
         * @summary Get Environment
         * @param {string} programId Identifier of the program
         * @param {string} environmentId Identifier of the environment
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironment(programId: string, environmentId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any): AxiosPromise<Environment> {
            return EnvironmentsApiFp(configuration).getEnvironment(programId, environmentId, xGwImsOrgId, authorization, xApiKey, options)(axios, basePath);
        },
        /**
         * Lists all environments in an program
         * @summary List Environments
         * @param {string} programId Identifier of the program
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {'dev' | 'stage' | 'prod'} [type] Type of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironments(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, type?: 'dev' | 'stage' | 'prod', options?: any): AxiosPromise<EnvironmentList> {
            return EnvironmentsApiFp(configuration).getEnvironments(programId, xGwImsOrgId, authorization, xApiKey, type, options)(axios, basePath);
        },
    };
};

/**
 * EnvironmentsApi - object-oriented interface
 * @export
 * @class EnvironmentsApi
 * @extends {BaseAPI}
 */
export class EnvironmentsApi extends BaseAPI {
    /**
     * Returns an environment by its id
     * @summary Get Environment
     * @param {string} programId Identifier of the program
     * @param {string} environmentId Identifier of the environment
     * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    public getEnvironment(programId: string, environmentId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any) {
        return EnvironmentsApiFp(this.configuration).getEnvironment(programId, environmentId, xGwImsOrgId, authorization, xApiKey, options)(this.axios, this.basePath);
    }

    /**
     * Lists all environments in an program
     * @summary List Environments
     * @param {string} programId Identifier of the program
     * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {'dev' | 'stage' | 'prod'} [type] Type of the environment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    public getEnvironments(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, type?: 'dev' | 'stage' | 'prod', options?: any) {
        return EnvironmentsApiFp(this.configuration).getEnvironments(programId, xGwImsOrgId, authorization, xApiKey, type, options)(this.axios, this.basePath);
    }

}


/**
 * PipelineExecutionApi - axios parameter creator
 * @export
 */
export const PipelineExecutionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
         * @summary Advance
         * @param {string} programId Identifier of the program.
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} executionId Identifier of the execution
         * @param {string} phaseId Identifier of the phase
         * @param {string} stepId Identifier of the step
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {string} contentType Must always be application/json
         * @param {object} body Input for advance. See documentation for details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advancePipelineExecution(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, body: object, options: any = {}): RequestArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling advancePipelineExecution.');
            }
            // verify required parameter 'pipelineId' is not null or undefined
            if (pipelineId === null || pipelineId === undefined) {
                throw new RequiredError('pipelineId','Required parameter pipelineId was null or undefined when calling advancePipelineExecution.');
            }
            // verify required parameter 'executionId' is not null or undefined
            if (executionId === null || executionId === undefined) {
                throw new RequiredError('executionId','Required parameter executionId was null or undefined when calling advancePipelineExecution.');
            }
            // verify required parameter 'phaseId' is not null or undefined
            if (phaseId === null || phaseId === undefined) {
                throw new RequiredError('phaseId','Required parameter phaseId was null or undefined when calling advancePipelineExecution.');
            }
            // verify required parameter 'stepId' is not null or undefined
            if (stepId === null || stepId === undefined) {
                throw new RequiredError('stepId','Required parameter stepId was null or undefined when calling advancePipelineExecution.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling advancePipelineExecution.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling advancePipelineExecution.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling advancePipelineExecution.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling advancePipelineExecution.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling advancePipelineExecution.');
            }
            const localVarPath = `/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"pipelineId"}}`, encodeURIComponent(String(pipelineId)))
                .replace(`{${"executionId"}}`, encodeURIComponent(String(executionId)))
                .replace(`{${"phaseId"}}`, encodeURIComponent(String(phaseId)))
                .replace(`{${"stepId"}}`, encodeURIComponent(String(stepId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = String(xGwImsOrgId);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
         * @summary Cancel
         * @param {string} programId Identifier of the program.
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} executionId Identifier of the execution
         * @param {string} phaseId Identifier of the phase
         * @param {string} stepId Identifier of the step
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {string} contentType Must always be application/json
         * @param {object} body Input for advance. See documentation for details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPipelineExecutionStep(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, body: object, options: any = {}): RequestArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling cancelPipelineExecutionStep.');
            }
            // verify required parameter 'pipelineId' is not null or undefined
            if (pipelineId === null || pipelineId === undefined) {
                throw new RequiredError('pipelineId','Required parameter pipelineId was null or undefined when calling cancelPipelineExecutionStep.');
            }
            // verify required parameter 'executionId' is not null or undefined
            if (executionId === null || executionId === undefined) {
                throw new RequiredError('executionId','Required parameter executionId was null or undefined when calling cancelPipelineExecutionStep.');
            }
            // verify required parameter 'phaseId' is not null or undefined
            if (phaseId === null || phaseId === undefined) {
                throw new RequiredError('phaseId','Required parameter phaseId was null or undefined when calling cancelPipelineExecutionStep.');
            }
            // verify required parameter 'stepId' is not null or undefined
            if (stepId === null || stepId === undefined) {
                throw new RequiredError('stepId','Required parameter stepId was null or undefined when calling cancelPipelineExecutionStep.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling cancelPipelineExecutionStep.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling cancelPipelineExecutionStep.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling cancelPipelineExecutionStep.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling cancelPipelineExecutionStep.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling cancelPipelineExecutionStep.');
            }
            const localVarPath = `/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"pipelineId"}}`, encodeURIComponent(String(pipelineId)))
                .replace(`{${"executionId"}}`, encodeURIComponent(String(executionId)))
                .replace(`{${"phaseId"}}`, encodeURIComponent(String(phaseId)))
                .replace(`{${"stepId"}}`, encodeURIComponent(String(stepId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = String(xGwImsOrgId);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns current pipeline execution if any.
         * @summary Get current pipeline execution
         * @param {string} programId Identifier of the program.
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentExecution(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options: any = {}): RequestArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling getCurrentExecution.');
            }
            // verify required parameter 'pipelineId' is not null or undefined
            if (pipelineId === null || pipelineId === undefined) {
                throw new RequiredError('pipelineId','Required parameter pipelineId was null or undefined when calling getCurrentExecution.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getCurrentExecution.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getCurrentExecution.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getCurrentExecution.');
            }
            const localVarPath = `/api/program/{programId}/pipeline/{pipelineId}/execution`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"pipelineId"}}`, encodeURIComponent(String(pipelineId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = String(xGwImsOrgId);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a pipeline execution by id
         * @summary Get pipeline execution
         * @param {string} programId Identifier of the program.
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} executionId Identifier of the execution
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecution(programId: string, pipelineId: string, executionId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options: any = {}): RequestArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling getExecution.');
            }
            // verify required parameter 'pipelineId' is not null or undefined
            if (pipelineId === null || pipelineId === undefined) {
                throw new RequiredError('pipelineId','Required parameter pipelineId was null or undefined when calling getExecution.');
            }
            // verify required parameter 'executionId' is not null or undefined
            if (executionId === null || executionId === undefined) {
                throw new RequiredError('executionId','Required parameter executionId was null or undefined when calling getExecution.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getExecution.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getExecution.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getExecution.');
            }
            const localVarPath = `/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"pipelineId"}}`, encodeURIComponent(String(pipelineId)))
                .replace(`{${"executionId"}}`, encodeURIComponent(String(executionId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = String(xGwImsOrgId);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the history of pipeline executions in a newest to oldest order
         * @summary List Executions
         * @param {string} programId Identifier of the program.
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {string} [start] Pagination start parameter
         * @param {number} [limit] Pagination limit parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutions(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, start?: string, limit?: number, options: any = {}): RequestArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling getExecutions.');
            }
            // verify required parameter 'pipelineId' is not null or undefined
            if (pipelineId === null || pipelineId === undefined) {
                throw new RequiredError('pipelineId','Required parameter pipelineId was null or undefined when calling getExecutions.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getExecutions.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getExecutions.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getExecutions.');
            }
            const localVarPath = `/api/program/{programId}/pipeline/{pipelineId}/executions`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"pipelineId"}}`, encodeURIComponent(String(pipelineId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = String(xGwImsOrgId);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the logs associated with a step.
         * @summary Get logs
         * @param {string} programId Identifier of the program.
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} executionId Identifier of the execution
         * @param {string} phaseId Identifier of the phase
         * @param {string} stepId Identifier of the step
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {string} [accept] Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStepLogs(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, accept?: string, options: any = {}): RequestArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling getStepLogs.');
            }
            // verify required parameter 'pipelineId' is not null or undefined
            if (pipelineId === null || pipelineId === undefined) {
                throw new RequiredError('pipelineId','Required parameter pipelineId was null or undefined when calling getStepLogs.');
            }
            // verify required parameter 'executionId' is not null or undefined
            if (executionId === null || executionId === undefined) {
                throw new RequiredError('executionId','Required parameter executionId was null or undefined when calling getStepLogs.');
            }
            // verify required parameter 'phaseId' is not null or undefined
            if (phaseId === null || phaseId === undefined) {
                throw new RequiredError('phaseId','Required parameter phaseId was null or undefined when calling getStepLogs.');
            }
            // verify required parameter 'stepId' is not null or undefined
            if (stepId === null || stepId === undefined) {
                throw new RequiredError('stepId','Required parameter stepId was null or undefined when calling getStepLogs.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getStepLogs.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getStepLogs.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getStepLogs.');
            }
            const localVarPath = `/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"pipelineId"}}`, encodeURIComponent(String(pipelineId)))
                .replace(`{${"executionId"}}`, encodeURIComponent(String(executionId)))
                .replace(`{${"phaseId"}}`, encodeURIComponent(String(phaseId)))
                .replace(`{${"stepId"}}`, encodeURIComponent(String(stepId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = String(xGwImsOrgId);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Starts the Pipeline. This works only if the pipeline is not already started.
         * @summary Start the pipeline
         * @param {string} programId Identifier of the program.
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {string} contentType Must always be application/json
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startPipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, options: any = {}): RequestArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling startPipeline.');
            }
            // verify required parameter 'pipelineId' is not null or undefined
            if (pipelineId === null || pipelineId === undefined) {
                throw new RequiredError('pipelineId','Required parameter pipelineId was null or undefined when calling startPipeline.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling startPipeline.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling startPipeline.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling startPipeline.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling startPipeline.');
            }
            const localVarPath = `/api/program/{programId}/pipeline/{pipelineId}/execution`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"pipelineId"}}`, encodeURIComponent(String(pipelineId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = String(xGwImsOrgId);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get step metrics
         * @param {string} programId Identifier of the program.
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} executionId Identifier of the execution
         * @param {string} phaseId Identifier of the phase
         * @param {string} stepId Identifier of the step
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stepMetric(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options: any = {}): RequestArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling stepMetric.');
            }
            // verify required parameter 'pipelineId' is not null or undefined
            if (pipelineId === null || pipelineId === undefined) {
                throw new RequiredError('pipelineId','Required parameter pipelineId was null or undefined when calling stepMetric.');
            }
            // verify required parameter 'executionId' is not null or undefined
            if (executionId === null || executionId === undefined) {
                throw new RequiredError('executionId','Required parameter executionId was null or undefined when calling stepMetric.');
            }
            // verify required parameter 'phaseId' is not null or undefined
            if (phaseId === null || phaseId === undefined) {
                throw new RequiredError('phaseId','Required parameter phaseId was null or undefined when calling stepMetric.');
            }
            // verify required parameter 'stepId' is not null or undefined
            if (stepId === null || stepId === undefined) {
                throw new RequiredError('stepId','Required parameter stepId was null or undefined when calling stepMetric.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling stepMetric.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling stepMetric.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling stepMetric.');
            }
            const localVarPath = `/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"pipelineId"}}`, encodeURIComponent(String(pipelineId)))
                .replace(`{${"executionId"}}`, encodeURIComponent(String(executionId)))
                .replace(`{${"phaseId"}}`, encodeURIComponent(String(phaseId)))
                .replace(`{${"stepId"}}`, encodeURIComponent(String(stepId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = String(xGwImsOrgId);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get step state
         * @param {string} programId Identifier of the program.
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} executionId Identifier of the execution
         * @param {string} phaseId Identifier of the phase
         * @param {string} stepId Identifier of the step
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stepState(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options: any = {}): RequestArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling stepState.');
            }
            // verify required parameter 'pipelineId' is not null or undefined
            if (pipelineId === null || pipelineId === undefined) {
                throw new RequiredError('pipelineId','Required parameter pipelineId was null or undefined when calling stepState.');
            }
            // verify required parameter 'executionId' is not null or undefined
            if (executionId === null || executionId === undefined) {
                throw new RequiredError('executionId','Required parameter executionId was null or undefined when calling stepState.');
            }
            // verify required parameter 'phaseId' is not null or undefined
            if (phaseId === null || phaseId === undefined) {
                throw new RequiredError('phaseId','Required parameter phaseId was null or undefined when calling stepState.');
            }
            // verify required parameter 'stepId' is not null or undefined
            if (stepId === null || stepId === undefined) {
                throw new RequiredError('stepId','Required parameter stepId was null or undefined when calling stepState.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling stepState.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling stepState.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling stepState.');
            }
            const localVarPath = `/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"pipelineId"}}`, encodeURIComponent(String(pipelineId)))
                .replace(`{${"executionId"}}`, encodeURIComponent(String(executionId)))
                .replace(`{${"phaseId"}}`, encodeURIComponent(String(phaseId)))
                .replace(`{${"stepId"}}`, encodeURIComponent(String(stepId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = String(xGwImsOrgId);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PipelineExecutionApi - functional programming interface
 * @export
 */
export const PipelineExecutionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
         * @summary Advance
         * @param {string} programId Identifier of the program.
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} executionId Identifier of the execution
         * @param {string} phaseId Identifier of the phase
         * @param {string} stepId Identifier of the step
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {string} contentType Must always be application/json
         * @param {object} body Input for advance. See documentation for details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advancePipelineExecution(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, body: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = PipelineExecutionApiAxiosParamCreator(configuration).advancePipelineExecution(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
         * @summary Cancel
         * @param {string} programId Identifier of the program.
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} executionId Identifier of the execution
         * @param {string} phaseId Identifier of the phase
         * @param {string} stepId Identifier of the step
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {string} contentType Must always be application/json
         * @param {object} body Input for advance. See documentation for details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPipelineExecutionStep(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, body: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = PipelineExecutionApiAxiosParamCreator(configuration).cancelPipelineExecutionStep(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns current pipeline execution if any.
         * @summary Get current pipeline execution
         * @param {string} programId Identifier of the program.
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentExecution(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PipelineExecution> {
            const localVarAxiosArgs = PipelineExecutionApiAxiosParamCreator(configuration).getCurrentExecution(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a pipeline execution by id
         * @summary Get pipeline execution
         * @param {string} programId Identifier of the program.
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} executionId Identifier of the execution
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecution(programId: string, pipelineId: string, executionId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PipelineExecution> {
            const localVarAxiosArgs = PipelineExecutionApiAxiosParamCreator(configuration).getExecution(programId, pipelineId, executionId, xGwImsOrgId, authorization, xApiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the history of pipeline executions in a newest to oldest order
         * @summary List Executions
         * @param {string} programId Identifier of the program.
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {string} [start] Pagination start parameter
         * @param {number} [limit] Pagination limit parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutions(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, start?: string, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PipelineExecutionListRepresentation> {
            const localVarAxiosArgs = PipelineExecutionApiAxiosParamCreator(configuration).getExecutions(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, start, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the logs associated with a step.
         * @summary Get logs
         * @param {string} programId Identifier of the program.
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} executionId Identifier of the execution
         * @param {string} phaseId Identifier of the phase
         * @param {string} stepId Identifier of the step
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {string} [accept] Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStepLogs(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = PipelineExecutionApiAxiosParamCreator(configuration).getStepLogs(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, accept, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Starts the Pipeline. This works only if the pipeline is not already started.
         * @summary Start the pipeline
         * @param {string} programId Identifier of the program.
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {string} contentType Must always be application/json
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startPipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = PipelineExecutionApiAxiosParamCreator(configuration).startPipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get step metrics
         * @param {string} programId Identifier of the program.
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} executionId Identifier of the execution
         * @param {string} phaseId Identifier of the phase
         * @param {string} stepId Identifier of the step
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stepMetric(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PipelineStepMetrics> {
            const localVarAxiosArgs = PipelineExecutionApiAxiosParamCreator(configuration).stepMetric(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get step state
         * @param {string} programId Identifier of the program.
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} executionId Identifier of the execution
         * @param {string} phaseId Identifier of the phase
         * @param {string} stepId Identifier of the step
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stepState(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PipelineExecutionStepState> {
            const localVarAxiosArgs = PipelineExecutionApiAxiosParamCreator(configuration).stepState(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PipelineExecutionApi - factory interface
 * @export
 */
export const PipelineExecutionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
         * @summary Advance
         * @param {string} programId Identifier of the program.
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} executionId Identifier of the execution
         * @param {string} phaseId Identifier of the phase
         * @param {string} stepId Identifier of the step
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {string} contentType Must always be application/json
         * @param {object} body Input for advance. See documentation for details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advancePipelineExecution(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, body: object, options?: any): AxiosPromise<void> {
            return PipelineExecutionApiFp(configuration).advancePipelineExecution(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body, options)(axios, basePath);
        },
        /**
         * Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
         * @summary Cancel
         * @param {string} programId Identifier of the program.
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} executionId Identifier of the execution
         * @param {string} phaseId Identifier of the phase
         * @param {string} stepId Identifier of the step
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {string} contentType Must always be application/json
         * @param {object} body Input for advance. See documentation for details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPipelineExecutionStep(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, body: object, options?: any): AxiosPromise<void> {
            return PipelineExecutionApiFp(configuration).cancelPipelineExecutionStep(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body, options)(axios, basePath);
        },
        /**
         * Returns current pipeline execution if any.
         * @summary Get current pipeline execution
         * @param {string} programId Identifier of the program.
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentExecution(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any): AxiosPromise<PipelineExecution> {
            return PipelineExecutionApiFp(configuration).getCurrentExecution(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, options)(axios, basePath);
        },
        /**
         * Returns a pipeline execution by id
         * @summary Get pipeline execution
         * @param {string} programId Identifier of the program.
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} executionId Identifier of the execution
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecution(programId: string, pipelineId: string, executionId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any): AxiosPromise<PipelineExecution> {
            return PipelineExecutionApiFp(configuration).getExecution(programId, pipelineId, executionId, xGwImsOrgId, authorization, xApiKey, options)(axios, basePath);
        },
        /**
         * Returns the history of pipeline executions in a newest to oldest order
         * @summary List Executions
         * @param {string} programId Identifier of the program.
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {string} [start] Pagination start parameter
         * @param {number} [limit] Pagination limit parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecutions(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, start?: string, limit?: number, options?: any): AxiosPromise<PipelineExecutionListRepresentation> {
            return PipelineExecutionApiFp(configuration).getExecutions(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, start, limit, options)(axios, basePath);
        },
        /**
         * Get the logs associated with a step.
         * @summary Get logs
         * @param {string} programId Identifier of the program.
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} executionId Identifier of the execution
         * @param {string} phaseId Identifier of the phase
         * @param {string} stepId Identifier of the step
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {string} [accept] Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStepLogs(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, accept?: string, options?: any): AxiosPromise<void> {
            return PipelineExecutionApiFp(configuration).getStepLogs(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, accept, options)(axios, basePath);
        },
        /**
         * Starts the Pipeline. This works only if the pipeline is not already started.
         * @summary Start the pipeline
         * @param {string} programId Identifier of the program.
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {string} contentType Must always be application/json
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startPipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, options?: any): AxiosPromise<void> {
            return PipelineExecutionApiFp(configuration).startPipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get step metrics
         * @param {string} programId Identifier of the program.
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} executionId Identifier of the execution
         * @param {string} phaseId Identifier of the phase
         * @param {string} stepId Identifier of the step
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stepMetric(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any): AxiosPromise<PipelineStepMetrics> {
            return PipelineExecutionApiFp(configuration).stepMetric(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get step state
         * @param {string} programId Identifier of the program.
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} executionId Identifier of the execution
         * @param {string} phaseId Identifier of the phase
         * @param {string} stepId Identifier of the step
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stepState(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any): AxiosPromise<PipelineExecutionStepState> {
            return PipelineExecutionApiFp(configuration).stepState(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, options)(axios, basePath);
        },
    };
};

/**
 * PipelineExecutionApi - object-oriented interface
 * @export
 * @class PipelineExecutionApi
 * @extends {BaseAPI}
 */
export class PipelineExecutionApi extends BaseAPI {
    /**
     * Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
     * @summary Advance
     * @param {string} programId Identifier of the program.
     * @param {string} pipelineId Identifier of the pipeline
     * @param {string} executionId Identifier of the execution
     * @param {string} phaseId Identifier of the phase
     * @param {string} stepId Identifier of the step
     * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {string} contentType Must always be application/json
     * @param {object} body Input for advance. See documentation for details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelineExecutionApi
     */
    public advancePipelineExecution(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, body: object, options?: any) {
        return PipelineExecutionApiFp(this.configuration).advancePipelineExecution(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body, options)(this.axios, this.basePath);
    }

    /**
     * Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
     * @summary Cancel
     * @param {string} programId Identifier of the program.
     * @param {string} pipelineId Identifier of the pipeline
     * @param {string} executionId Identifier of the execution
     * @param {string} phaseId Identifier of the phase
     * @param {string} stepId Identifier of the step
     * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {string} contentType Must always be application/json
     * @param {object} body Input for advance. See documentation for details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelineExecutionApi
     */
    public cancelPipelineExecutionStep(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, body: object, options?: any) {
        return PipelineExecutionApiFp(this.configuration).cancelPipelineExecutionStep(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body, options)(this.axios, this.basePath);
    }

    /**
     * Returns current pipeline execution if any.
     * @summary Get current pipeline execution
     * @param {string} programId Identifier of the program.
     * @param {string} pipelineId Identifier of the pipeline
     * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelineExecutionApi
     */
    public getCurrentExecution(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any) {
        return PipelineExecutionApiFp(this.configuration).getCurrentExecution(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, options)(this.axios, this.basePath);
    }

    /**
     * Returns a pipeline execution by id
     * @summary Get pipeline execution
     * @param {string} programId Identifier of the program.
     * @param {string} pipelineId Identifier of the pipeline
     * @param {string} executionId Identifier of the execution
     * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelineExecutionApi
     */
    public getExecution(programId: string, pipelineId: string, executionId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any) {
        return PipelineExecutionApiFp(this.configuration).getExecution(programId, pipelineId, executionId, xGwImsOrgId, authorization, xApiKey, options)(this.axios, this.basePath);
    }

    /**
     * Returns the history of pipeline executions in a newest to oldest order
     * @summary List Executions
     * @param {string} programId Identifier of the program.
     * @param {string} pipelineId Identifier of the pipeline
     * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {string} [start] Pagination start parameter
     * @param {number} [limit] Pagination limit parameter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelineExecutionApi
     */
    public getExecutions(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, start?: string, limit?: number, options?: any) {
        return PipelineExecutionApiFp(this.configuration).getExecutions(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, start, limit, options)(this.axios, this.basePath);
    }

    /**
     * Get the logs associated with a step.
     * @summary Get logs
     * @param {string} programId Identifier of the program.
     * @param {string} pipelineId Identifier of the pipeline
     * @param {string} executionId Identifier of the execution
     * @param {string} phaseId Identifier of the phase
     * @param {string} stepId Identifier of the step
     * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {string} [accept] Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelineExecutionApi
     */
    public getStepLogs(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, accept?: string, options?: any) {
        return PipelineExecutionApiFp(this.configuration).getStepLogs(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, accept, options)(this.axios, this.basePath);
    }

    /**
     * Starts the Pipeline. This works only if the pipeline is not already started.
     * @summary Start the pipeline
     * @param {string} programId Identifier of the program.
     * @param {string} pipelineId Identifier of the pipeline
     * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {string} contentType Must always be application/json
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelineExecutionApi
     */
    public startPipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, options?: any) {
        return PipelineExecutionApiFp(this.configuration).startPipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get step metrics
     * @param {string} programId Identifier of the program.
     * @param {string} pipelineId Identifier of the pipeline
     * @param {string} executionId Identifier of the execution
     * @param {string} phaseId Identifier of the phase
     * @param {string} stepId Identifier of the step
     * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelineExecutionApi
     */
    public stepMetric(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any) {
        return PipelineExecutionApiFp(this.configuration).stepMetric(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get step state
     * @param {string} programId Identifier of the program.
     * @param {string} pipelineId Identifier of the pipeline
     * @param {string} executionId Identifier of the execution
     * @param {string} phaseId Identifier of the phase
     * @param {string} stepId Identifier of the step
     * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelineExecutionApi
     */
    public stepState(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any) {
        return PipelineExecutionApiFp(this.configuration).stepState(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, options)(this.axios, this.basePath);
    }

}


/**
 * PipelinesApi - axios parameter creator
 * @export
 */
export const PipelinesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a pipeline. All the data is wiped.
         * @summary Delete a Pipeline
         * @param {string} programId Identifier of the program
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options: any = {}): RequestArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling deletePipeline.');
            }
            // verify required parameter 'pipelineId' is not null or undefined
            if (pipelineId === null || pipelineId === undefined) {
                throw new RequiredError('pipelineId','Required parameter pipelineId was null or undefined when calling deletePipeline.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling deletePipeline.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling deletePipeline.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling deletePipeline.');
            }
            const localVarPath = `/api/program/{programId}/pipeline/{pipelineId}`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"pipelineId"}}`, encodeURIComponent(String(pipelineId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = String(xGwImsOrgId);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a pipeline by its id
         * @summary Get Pipeline
         * @param {string} programId Identifier of the program
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options: any = {}): RequestArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling getPipeline.');
            }
            // verify required parameter 'pipelineId' is not null or undefined
            if (pipelineId === null || pipelineId === undefined) {
                throw new RequiredError('pipelineId','Required parameter pipelineId was null or undefined when calling getPipeline.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getPipeline.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getPipeline.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getPipeline.');
            }
            const localVarPath = `/api/program/{programId}/pipeline/{pipelineId}`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"pipelineId"}}`, encodeURIComponent(String(pipelineId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = String(xGwImsOrgId);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all the pipelines that the requesting user has access to in an program
         * @summary List Pipelines
         * @param {string} programId Identifier of the program
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPipelines(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options: any = {}): RequestArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling getPipelines.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getPipelines.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getPipelines.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getPipelines.');
            }
            const localVarPath = `/api/program/{programId}/pipelines`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = String(xGwImsOrgId);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Patches a pipeline within an program.
         * @summary Patches Pipeline
         * @param {string} programId Identifier of the program
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {string} contentType Must always be application/json
         * @param {Pipeline} body The updated Pipeline
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, body: Pipeline, options: any = {}): RequestArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling patchPipeline.');
            }
            // verify required parameter 'pipelineId' is not null or undefined
            if (pipelineId === null || pipelineId === undefined) {
                throw new RequiredError('pipelineId','Required parameter pipelineId was null or undefined when calling patchPipeline.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling patchPipeline.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling patchPipeline.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling patchPipeline.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling patchPipeline.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling patchPipeline.');
            }
            const localVarPath = `/api/program/{programId}/pipeline/{pipelineId}`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"pipelineId"}}`, encodeURIComponent(String(pipelineId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = String(xGwImsOrgId);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PipelinesApi - functional programming interface
 * @export
 */
export const PipelinesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete a pipeline. All the data is wiped.
         * @summary Delete a Pipeline
         * @param {string} programId Identifier of the program
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = PipelinesApiAxiosParamCreator(configuration).deletePipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a pipeline by its id
         * @summary Get Pipeline
         * @param {string} programId Identifier of the program
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pipeline> {
            const localVarAxiosArgs = PipelinesApiAxiosParamCreator(configuration).getPipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns all the pipelines that the requesting user has access to in an program
         * @summary List Pipelines
         * @param {string} programId Identifier of the program
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPipelines(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PipelineList> {
            const localVarAxiosArgs = PipelinesApiAxiosParamCreator(configuration).getPipelines(programId, xGwImsOrgId, authorization, xApiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Patches a pipeline within an program.
         * @summary Patches Pipeline
         * @param {string} programId Identifier of the program
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {string} contentType Must always be application/json
         * @param {Pipeline} body The updated Pipeline
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, body: Pipeline, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pipeline> {
            const localVarAxiosArgs = PipelinesApiAxiosParamCreator(configuration).patchPipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PipelinesApi - factory interface
 * @export
 */
export const PipelinesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete a pipeline. All the data is wiped.
         * @summary Delete a Pipeline
         * @param {string} programId Identifier of the program
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any): AxiosPromise<void> {
            return PipelinesApiFp(configuration).deletePipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, options)(axios, basePath);
        },
        /**
         * Returns a pipeline by its id
         * @summary Get Pipeline
         * @param {string} programId Identifier of the program
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any): AxiosPromise<Pipeline> {
            return PipelinesApiFp(configuration).getPipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, options)(axios, basePath);
        },
        /**
         * Returns all the pipelines that the requesting user has access to in an program
         * @summary List Pipelines
         * @param {string} programId Identifier of the program
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPipelines(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any): AxiosPromise<PipelineList> {
            return PipelinesApiFp(configuration).getPipelines(programId, xGwImsOrgId, authorization, xApiKey, options)(axios, basePath);
        },
        /**
         * Patches a pipeline within an program.
         * @summary Patches Pipeline
         * @param {string} programId Identifier of the program
         * @param {string} pipelineId Identifier of the pipeline
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {string} contentType Must always be application/json
         * @param {Pipeline} body The updated Pipeline
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, body: Pipeline, options?: any): AxiosPromise<Pipeline> {
            return PipelinesApiFp(configuration).patchPipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType, body, options)(axios, basePath);
        },
    };
};

/**
 * PipelinesApi - object-oriented interface
 * @export
 * @class PipelinesApi
 * @extends {BaseAPI}
 */
export class PipelinesApi extends BaseAPI {
    /**
     * Delete a pipeline. All the data is wiped.
     * @summary Delete a Pipeline
     * @param {string} programId Identifier of the program
     * @param {string} pipelineId Identifier of the pipeline
     * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    public deletePipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any) {
        return PipelinesApiFp(this.configuration).deletePipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, options)(this.axios, this.basePath);
    }

    /**
     * Returns a pipeline by its id
     * @summary Get Pipeline
     * @param {string} programId Identifier of the program
     * @param {string} pipelineId Identifier of the pipeline
     * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    public getPipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any) {
        return PipelinesApiFp(this.configuration).getPipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, options)(this.axios, this.basePath);
    }

    /**
     * Returns all the pipelines that the requesting user has access to in an program
     * @summary List Pipelines
     * @param {string} programId Identifier of the program
     * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    public getPipelines(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any) {
        return PipelinesApiFp(this.configuration).getPipelines(programId, xGwImsOrgId, authorization, xApiKey, options)(this.axios, this.basePath);
    }

    /**
     * Patches a pipeline within an program.
     * @summary Patches Pipeline
     * @param {string} programId Identifier of the program
     * @param {string} pipelineId Identifier of the pipeline
     * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {string} contentType Must always be application/json
     * @param {Pipeline} body The updated Pipeline
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    public patchPipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, body: Pipeline, options?: any) {
        return PipelinesApiFp(this.configuration).patchPipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType, body, options)(this.axios, this.basePath);
    }

}


/**
 * ProgramsApi - axios parameter creator
 * @export
 */
export const ProgramsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a program by its id
         * @summary Get Program
         * @param {string} programId Identifier of the program
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProgram(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options: any = {}): RequestArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling getProgram.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getProgram.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getProgram.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getProgram.');
            }
            const localVarPath = `/api/program/{programId}`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = String(xGwImsOrgId);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all programs that the requesting user has access to
         * @summary Lists Programs
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrograms(xGwImsOrgId: string, authorization: string, xApiKey: string, options: any = {}): RequestArgs {
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getPrograms.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getPrograms.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getPrograms.');
            }
            const localVarPath = `/api/programs`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = String(xGwImsOrgId);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProgramsApi - functional programming interface
 * @export
 */
export const ProgramsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns a program by its id
         * @summary Get Program
         * @param {string} programId Identifier of the program
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProgram(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Program> {
            const localVarAxiosArgs = ProgramsApiAxiosParamCreator(configuration).getProgram(programId, xGwImsOrgId, authorization, xApiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns all programs that the requesting user has access to
         * @summary Lists Programs
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrograms(xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProgramList> {
            const localVarAxiosArgs = ProgramsApiAxiosParamCreator(configuration).getPrograms(xGwImsOrgId, authorization, xApiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProgramsApi - factory interface
 * @export
 */
export const ProgramsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns a program by its id
         * @summary Get Program
         * @param {string} programId Identifier of the program
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProgram(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any): AxiosPromise<Program> {
            return ProgramsApiFp(configuration).getProgram(programId, xGwImsOrgId, authorization, xApiKey, options)(axios, basePath);
        },
        /**
         * Returns all programs that the requesting user has access to
         * @summary Lists Programs
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrograms(xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any): AxiosPromise<ProgramList> {
            return ProgramsApiFp(configuration).getPrograms(xGwImsOrgId, authorization, xApiKey, options)(axios, basePath);
        },
    };
};

/**
 * ProgramsApi - object-oriented interface
 * @export
 * @class ProgramsApi
 * @extends {BaseAPI}
 */
export class ProgramsApi extends BaseAPI {
    /**
     * Returns a program by its id
     * @summary Get Program
     * @param {string} programId Identifier of the program
     * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    public getProgram(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any) {
        return ProgramsApiFp(this.configuration).getProgram(programId, xGwImsOrgId, authorization, xApiKey, options)(this.axios, this.basePath);
    }

    /**
     * Returns all programs that the requesting user has access to
     * @summary Lists Programs
     * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    public getPrograms(xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any) {
        return ProgramsApiFp(this.configuration).getPrograms(xGwImsOrgId, authorization, xApiKey, options)(this.axios, this.basePath);
    }

}


/**
 * RepositoriesApi - axios parameter creator
 * @export
 */
export const RepositoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists all Repositories in an program
         * @summary Lists Repositories
         * @param {string} programId Identifier of the program
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRepositories(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options: any = {}): RequestArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling getRepositories.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getRepositories.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getRepositories.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getRepositories.');
            }
            const localVarPath = `/api/program/{programId}/repositories`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = String(xGwImsOrgId);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an repository by its id
         * @summary Get Repository
         * @param {string} programId Identifier of the program
         * @param {string} repositoryId Identifier of the repository
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRepository(programId: string, repositoryId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options: any = {}): RequestArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling getRepository.');
            }
            // verify required parameter 'repositoryId' is not null or undefined
            if (repositoryId === null || repositoryId === undefined) {
                throw new RequiredError('repositoryId','Required parameter repositoryId was null or undefined when calling getRepository.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getRepository.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getRepository.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getRepository.');
            }
            const localVarPath = `/api/program/{programId}/repository/{repositoryId}`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"repositoryId"}}`, encodeURIComponent(String(repositoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = String(xGwImsOrgId);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RepositoriesApi - functional programming interface
 * @export
 */
export const RepositoriesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Lists all Repositories in an program
         * @summary Lists Repositories
         * @param {string} programId Identifier of the program
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRepositories(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepositoryList> {
            const localVarAxiosArgs = RepositoriesApiAxiosParamCreator(configuration).getRepositories(programId, xGwImsOrgId, authorization, xApiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an repository by its id
         * @summary Get Repository
         * @param {string} programId Identifier of the program
         * @param {string} repositoryId Identifier of the repository
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRepository(programId: string, repositoryId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Repository> {
            const localVarAxiosArgs = RepositoriesApiAxiosParamCreator(configuration).getRepository(programId, repositoryId, xGwImsOrgId, authorization, xApiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RepositoriesApi - factory interface
 * @export
 */
export const RepositoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Lists all Repositories in an program
         * @summary Lists Repositories
         * @param {string} programId Identifier of the program
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRepositories(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any): AxiosPromise<RepositoryList> {
            return RepositoriesApiFp(configuration).getRepositories(programId, xGwImsOrgId, authorization, xApiKey, options)(axios, basePath);
        },
        /**
         * Returns an repository by its id
         * @summary Get Repository
         * @param {string} programId Identifier of the program
         * @param {string} repositoryId Identifier of the repository
         * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
         * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
         * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRepository(programId: string, repositoryId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any): AxiosPromise<Repository> {
            return RepositoriesApiFp(configuration).getRepository(programId, repositoryId, xGwImsOrgId, authorization, xApiKey, options)(axios, basePath);
        },
    };
};

/**
 * RepositoriesApi - object-oriented interface
 * @export
 * @class RepositoriesApi
 * @extends {BaseAPI}
 */
export class RepositoriesApi extends BaseAPI {
    /**
     * Lists all Repositories in an program
     * @summary Lists Repositories
     * @param {string} programId Identifier of the program
     * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepositoriesApi
     */
    public getRepositories(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any) {
        return RepositoriesApiFp(this.configuration).getRepositories(programId, xGwImsOrgId, authorization, xApiKey, options)(this.axios, this.basePath);
    }

    /**
     * Returns an repository by its id
     * @summary Get Repository
     * @param {string} programId Identifier of the program
     * @param {string} repositoryId Identifier of the repository
     * @param {string} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepositoriesApi
     */
    public getRepository(programId: string, repositoryId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: any) {
        return RepositoriesApiFp(this.configuration).getRepository(programId, repositoryId, xGwImsOrgId, authorization, xApiKey, options)(this.axios, this.basePath);
    }

}


