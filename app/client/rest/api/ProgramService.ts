/* tslint:disable */

/**
 * This file was automatically generated by "Swaxios".
 * It should not be modified by hand.
 */

import { AxiosInstance, AxiosRequestConfig } from "axios";
import {
  Program,
  Repository,
  Pipeline,
  PipelineExecution,
  PipelineExecutionStepState,
  Environment
} from "../../interfaces";

export class ProgramService {
  private readonly apiClient: AxiosInstance;

  constructor(apiClient: AxiosInstance) {
    this.apiClient = apiClient;
  }

  /**
   * @param programId Identifier of the program
   * @param x-gw-ims-org-id IMS organization ID that the request is being made under.
   * @param Authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param x-api-key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   */
  getProgram = async (programId: string): Promise<Program> => {
    const config: AxiosRequestConfig = {
      method: "get",
      url: `/api/program/${programId}`
    };
    const response = await this.apiClient.request<Program>(config);
    return response.data;
  };

  /**
   * @param programId Identifier of the program
   * @param repositoryId Identifier of the repository
   * @param x-gw-ims-org-id IMS organization ID that the request is being made under.
   * @param Authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param x-api-key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   */
  getRepository = async (
    programId: string,
    repositoryId: string
  ): Promise<Repository> => {
    const config: AxiosRequestConfig = {
      method: "get",
      url: `/api/program/${programId}/repository/${repositoryId}`
    };
    const response = await this.apiClient.request<Repository>(config);
    return response.data;
  };

  /**
   * @param programId Identifier of the program
   * @param pipelineId Identifier of the pipeline
   * @param x-gw-ims-org-id IMS organization ID that the request is being made under.
   * @param Authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param x-api-key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   */
  getPipeline = async (
    programId: string,
    pipelineId: string
  ): Promise<Pipeline> => {
    const config: AxiosRequestConfig = {
      method: "get",
      url: `/api/program/${programId}/pipeline/${pipelineId}`
    };
    const response = await this.apiClient.request<Pipeline>(config);
    return response.data;
  };

  /**
   * @param programId Identifier of the program
   * @param pipelineId Identifier of the pipeline
   * @param x-gw-ims-org-id IMS organization ID that the request is being made under.
   * @param Authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param x-api-key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   */
  deletePipeline = async (
    programId: string,
    pipelineId: string
  ): Promise<void> => {
    const config: AxiosRequestConfig = {
      method: "delete",
      url: `/api/program/${programId}/pipeline/${pipelineId}`
    };
    await this.apiClient.request(config);
  };

  /**
   * @param programId Identifier of the program
   * @param pipelineId Identifier of the pipeline
   * @param body The updated Pipeline
   * @param x-gw-ims-org-id IMS organization ID that the request is being made under.
   * @param Authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param x-api-key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @param Content-Type Must always be application/json
   */
  patchPipeline = async (
    programId: string,
    pipelineId: string,
    body: Pipeline
  ): Promise<Pipeline> => {
    const config: AxiosRequestConfig = {
      data: {
        ...body
      },
      method: "patch",
      url: `/api/program/${programId}/pipeline/${pipelineId}`
    };
    const response = await this.apiClient.request<Pipeline>(config);
    return response.data;
  };

  /**
   * @param programId Identifier of the program.
   * @param pipelineId Identifier of the pipeline
   * @param executionId Identifier of the execution
   * @param x-gw-ims-org-id IMS organization ID that the request is being made under.
   * @param Authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param x-api-key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   */
  getExecution = async (
    programId: string,
    pipelineId: string,
    executionId: string
  ): Promise<PipelineExecution> => {
    const config: AxiosRequestConfig = {
      method: "get",
      url: `/api/program/${programId}/pipeline/${pipelineId}/execution/${executionId}`
    };
    const response = await this.apiClient.request<PipelineExecution>(config);
    return response.data;
  };

  /**
   * @param programId Identifier of the program.
   * @param pipelineId Identifier of the pipeline
   * @param executionId Identifier of the execution
   * @param phaseId Identifier of the phase
   * @param stepId Identifier of the step
   * @param x-gw-ims-org-id IMS organization ID that the request is being made under.
   * @param Authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param x-api-key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   */
  stepState = async (
    programId: string,
    pipelineId: string,
    executionId: string,
    phaseId: string,
    stepId: string
  ): Promise<PipelineExecutionStepState> => {
    const config: AxiosRequestConfig = {
      method: "get",
      url: `/api/program/${programId}/pipeline/${pipelineId}/execution/${executionId}/phase/${phaseId}/step/${stepId}`
    };
    const response = await this.apiClient.request<PipelineExecutionStepState>(
      config
    );
    return response.data;
  };

  /**
   * @param programId Identifier of the program
   * @param environmentId Identifier of the environment
   * @param x-gw-ims-org-id IMS organization ID that the request is being made under.
   * @param Authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param x-api-key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   */
  getEnvironment = async (
    programId: string,
    environmentId: string
  ): Promise<Environment> => {
    const config: AxiosRequestConfig = {
      method: "get",
      url: `/api/program/${programId}/environment/${environmentId}`
    };
    const response = await this.apiClient.request<Environment>(config);
    return response.data;
  };
}
