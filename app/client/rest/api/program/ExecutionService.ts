/* tslint:disable */

/**
 * This file was automatically generated by "Swaxios".
 * It should not be modified by hand.
 */

import { AxiosInstance, AxiosRequestConfig } from "axios";
import { PipelineExecution } from "../../../interfaces";

export class ExecutionService {
  private readonly apiClient: AxiosInstance;

  constructor(apiClient: AxiosInstance) {
    this.apiClient = apiClient;
  }

  /**
   * @param programId Identifier of the program.
   * @param pipelineId Identifier of the pipeline
   * @param x-gw-ims-org-id IMS organization ID that the request is being made under.
   * @param Authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param x-api-key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   */
  getCurrentExecution = async (
    programId: string,
    pipelineId: string
  ): Promise<PipelineExecution> => {
    const config: AxiosRequestConfig = {
      method: "get",
      url: `/api/program/${programId}/pipeline/${pipelineId}/execution`
    };
    const response = await this.apiClient.request<PipelineExecution>(config);
    return response.data;
  };

  /**
   * @param programId Identifier of the program.
   * @param pipelineId Identifier of the pipeline
   * @param x-gw-ims-org-id IMS organization ID that the request is being made under.
   * @param Authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param x-api-key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @param Content-Type Must always be application/json
   */
  startPipeline = async (
    programId: string,
    pipelineId: string
  ): Promise<void> => {
    const config: AxiosRequestConfig = {
      method: "put",
      url: `/api/program/${programId}/pipeline/${pipelineId}/execution`
    };
    await this.apiClient.request(config);
  };
}
